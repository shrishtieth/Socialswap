

// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.6.0;
pragma experimental ABIEncoderV2;
library Math {
    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a >= b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow, so we distribute
        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
    }
}

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        uint256 c = a + b;
        if (c < a) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b > a) return (false, 0);
        return (true, a - b);
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) return (true, 0);
        uint256 c = a * b;
        if (c / a != b) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a / b);
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a % b);
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) return 0;
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: modulo by zero");
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        return a - b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryDiv}.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a % b;
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}
interface ITRC20 {
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    function totalSupply() external view returns(uint256);
    function balanceOf(address owner) external view returns(uint256);
    function approve(address spender, uint256 value) external returns(bool);
    function transfer(address to, uint256 value) external returns(bool);
    function transferFrom(address from, address to, uint256 value) external returns(bool);

    function name() external view returns(string memory);
    function symbol() external view returns(string memory);
    function decimals() external view returns(uint8);
    function allowance(address owner, address spender) external view returns(uint256);
}

contract TRC20 is ITRC20 {
    using SafeMath for uint256;

    string public override name;
    string public override symbol;
    uint8 public override decimals;

    uint256 public override totalSupply;

    mapping(address => uint256) public override balanceOf;
    mapping(address => mapping(address => uint256)) public override allowance;

    function _mint(address to, uint256 value) internal {
        totalSupply = totalSupply.add(value);
        balanceOf[to] = balanceOf[to].add(value);

        emit Transfer(address(0), to, value);
    }

    function _burn(address from, uint256 value) internal {
        balanceOf[from] = balanceOf[from].sub(value);
        totalSupply = totalSupply.sub(value);

        emit Transfer(from, address(0), value);
    }

    function _approve(address owner, address spender, uint256 value) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        allowance[owner][spender] = value;

        emit Approval(owner, spender, value);
    }

    function _transfer(address from, address to, uint256 value) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        balanceOf[from] = balanceOf[from].sub(value);
        balanceOf[to] = balanceOf[to].add(value);

        emit Transfer(from, to, value);
    }

    function approve(address spender, uint256 value) override external returns(bool) {
        _approve(msg.sender, spender, value);

        return true;
    }

    function transfer(address to, uint256 value) override external returns(bool) {
        _transfer(msg.sender, to, value);

        return true;
    }

    function transferFrom(address from, address to, uint256 value) override external returns(bool) {
        if(allowance[from][msg.sender] != type(uint256).max) {
            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);
        }

        _transfer(from, to, value);

        return true;
    }
}
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        // solhint-disable-next-line no-inline-assembly
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain`call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}
library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(ITRC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(ITRC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {ITRC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(ITRC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        // solhint-disable-next-line max-line-length
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(ITRC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(ITRC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(ITRC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor () internal {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and make it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}
contract Owned {
    address public owner;
    address public nominatedOwner;

    constructor(address _owner) public {
        require(_owner != address(0), "Owner address cannot be 0");
        owner = _owner;
        emit OwnerChanged(address(0), _owner);
    }

    function nominateNewOwner(address _owner) external onlyOwner {
        nominatedOwner = _owner;
        emit OwnerNominated(_owner);
    }

    function acceptOwnership() external {
        require(msg.sender == nominatedOwner, "You must be nominated before you can accept ownership");
        emit OwnerChanged(owner, nominatedOwner);
        owner = nominatedOwner;
        nominatedOwner = address(0);
    }

    modifier onlyOwner {
        _onlyOwner();
        _;
    }

    function _onlyOwner() private view {
        require(msg.sender == owner, "Only the contract owner may perform this action");
    }

    event OwnerNominated(address newOwner);
    event OwnerChanged(address oldOwner, address newOwner);
}

library Counters {
    using SafeMath for uint256;

    struct Counter {
        // This variable should never be directly accessed by users of the library: interactions must be restricted to
        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add
        // this feature: see https://github.com/ethereum/solidity/issues/4637
        uint256 _value; // default: 0
    }

    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }

    function increment(Counter storage counter) internal {
        // The {SafeMath} overflow check can be skipped here, see the comment at the top
        counter._value += 1;
    }

    function decrement(Counter storage counter) internal {
        counter._value = counter._value.sub(1);
    }
}


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

contract LimitOrderPrortocol is Ownable {
    using SafeMath for uint256;
    using SafeERC20 for ITRC20;
      using Counters for Counters.Counter;
      Counters.Counter public orderId;

    /* ========== STATE VARIABLES ========== */

   struct orderBook{
     address user;
     address inputToken;
     address outputToken;
     uint256 amountInputToken;
     uint256 amountOutputToken;
     uint256 inputToOutputPrice;
     uint256 outputToInputPrice;
     uint256 expiry;
     bool isActive;
     uint256 uniqueId;
     
       
   }
   
    struct completedOrderBook{
     address user;
     address inputToken;
     address outputToken;
     uint256 amountInputToken;
     uint256 amountOutputToken;
     uint256 inputToOutputPrice;
     uint256 outputToInputPrice;
     uint256 expiry;
     bool isActive;
     uint256 uniqueId;
     
       
   }
   
   mapping(uint256 => orderBook) public idToOrder;
   mapping(address => orderBook[]) public userOrders;
   mapping(address => completedOrderBook[]) public userCompletedOrders;
   event TransferEqual(uint256 amount);
   event TransferLarge(uint256);
   event TransferLargeLeft(uint256 id);
   event TransferSmall(uint256);
   event OrderCompleted(uint256 orderId) ;
  
    constructor( 
    ) public  { }
    
    function canBeFilled(address input, address output, uint256 inputToOutputPrice , uint256 inputAmount) public view returns( bool fill, orderBook[] memory matchingOrders, uint256 totalAmount){
        uint256 count = orderId.current();
        uint256 totalMatchingOrders;
        uint256 outputAmountOrders = 0;
        uint256 index =0;
        for(uint256 i=0; i<count && outputAmountOrders < inputAmount ;i++){
          if(idToOrder[i+1].outputToken == input && idToOrder[i+1].inputToken == output && idToOrder[i+1].outputToInputPrice == inputToOutputPrice &&
          idToOrder[i+1].expiry > block.timestamp && idToOrder[i+1].isActive == true
          && ITRC20(idToOrder[i+1].inputToken).allowance(idToOrder[i+1].user, address(this)) >= idToOrder[i+1].amountInputToken
          && ITRC20(idToOrder[i+1].inputToken).balanceOf(idToOrder[i+1].user) >= idToOrder[i+1].amountInputToken){
              totalMatchingOrders++;
              outputAmountOrders = outputAmountOrders + idToOrder[i+1].amountOutputToken;
          }
            
        }
        
        outputAmountOrders = 0;
        orderBook[] memory orders = new orderBook[](totalMatchingOrders);
         for(uint256 i=0; i<count && outputAmountOrders < inputAmount ;i++){
          if(idToOrder[i+1].outputToken == input &&  idToOrder[i+1].inputToken == output && idToOrder[i+1].outputToInputPrice == inputToOutputPrice &&
          idToOrder[i+1].expiry > block.timestamp && idToOrder[i+1].isActive == true
          && ITRC20(idToOrder[i+1].inputToken).allowance(idToOrder[i+1].user, address(this)) >= idToOrder[i+1].amountInputToken
          && ITRC20(idToOrder[i+1].inputToken).balanceOf(idToOrder[i+1].user) >= idToOrder[i+1].amountInputToken ){
             orders[index] = idToOrder[i+1];
             index++;
             outputAmountOrders = outputAmountOrders + idToOrder[i+1].amountOutputToken;
          }
         }
         if(orders.length == 0){
             return(false, orders,0);
         }
         else{
         return(true, orders,outputAmountOrders);
         }
        
    }
  event OrderPlaced(uint256 id);
    
    function placeOrder(address inputToken, address outputToken, uint256 amountInputToken, uint256 amountOutputToken, uint256 inputToOutputPrice, uint256 outputToInputPrice, uint256 duration) external {
        (bool filled, orderBook[] memory orders, uint256 outputAmounts) = canBeFilled(inputToken, outputToken, inputToOutputPrice, amountInputToken);
        if(filled == true){
          
        if(outputAmounts == amountInputToken)
        {
            transferEqual(orders, outputToken, inputToken, msg.sender);
            orderId.increment();
            idToOrder[orderId.current()] = orderBook({
            user: msg.sender,
            inputToken : inputToken,
            outputToken : outputToken,
            amountInputToken: amountInputToken,
            amountOutputToken: amountOutputToken, 
      inputToOutputPrice : inputToOutputPrice,
      outputToInputPrice: outputToInputPrice,
      expiry: block.timestamp+ duration,
      isActive : false ,
      uniqueId: orderId.current() 
                
            });
            
            userOrders[msg.sender].push(idToOrder[orderId.current()]);
            emit OrderCompleted(orderId.current());
        }
        
        else if(outputAmounts > amountInputToken){
          
            orderId.increment();
            idToOrder[orderId.current()] = orderBook({
            user: msg.sender,
            inputToken : inputToken,
            outputToken : outputToken,
            amountInputToken: amountInputToken,
            amountOutputToken: amountOutputToken, 
      inputToOutputPrice : inputToOutputPrice,
      outputToInputPrice: outputToInputPrice,
      expiry: block.timestamp+ duration,
      isActive : false ,
      uniqueId: orderId.current() 
                
            });
            
            userOrders[msg.sender].push(idToOrder[orderId.current()]);
            emit OrderCompleted(orderId.current());
            
        }
        
        else if(outputAmounts < amountInputToken){
            
            uint256 left = transferSmall(orders, outputToken, inputToken, msg.sender);
             orderId.increment();
            idToOrder[orderId.current()] = orderBook({
            user: msg.sender,
            inputToken : inputToken,
            outputToken : outputToken,
            amountInputToken: left,
            amountOutputToken: (inputToOutputPrice*left).div(10**18), 
            inputToOutputPrice : inputToOutputPrice,
            outputToInputPrice: outputToInputPrice,
            expiry: block.timestamp+ duration,
            isActive : true,
            uniqueId: orderId.current() 
                
            });
             userOrders[msg.sender].push(idToOrder[orderId.current()]);
            emit OrderPlaced(orderId.current()); 
        }
        

        }
        
        else{
            orderId.increment();
            idToOrder[orderId.current()] = orderBook({
            user: msg.sender,
            inputToken : inputToken,
            outputToken : outputToken,
            amountInputToken: amountInputToken,
            amountOutputToken: amountOutputToken, 
      inputToOutputPrice : inputToOutputPrice,
      outputToInputPrice: outputToInputPrice,
      expiry: block.timestamp+ duration,
      isActive : true ,
      uniqueId: orderId.current() 
                
            });
            
            userOrders[msg.sender].push(idToOrder[orderId.current()]);
            emit OrderPlaced(orderId.current());
        }
        
        
    }
    
    function transferEqual(orderBook[] memory orders, address outputToken, address inputToken, address sender) internal {
  uint256 length = orders.length;
  for(uint256 i = 0; i< length; i++){
                transferFunds(outputToken, inputToken, orders[i].amountInputToken, orders[i].amountOutputToken, orders[i].user, sender);
                uint256 id = orders[i].uniqueId;
                idToOrder[id].isActive = false;
                emit OrderCompleted(id);
            }

            emit TransferEqual(1);
        }
    
    
    function transferLarge(orderBook[] memory orders, address outputToken, address inputToken, address sender, uint256 amountInputToken) private {
        uint256 length = orders.length;  
         uint256 totalSwapped =0;
           for(uint256 i = 0; i< length; i++)
           if(totalSwapped+orders[i].amountOutputToken < amountInputToken){
               transferFunds(outputToken, inputToken, orders[i].amountInputToken, orders[i].amountOutputToken, orders[i].user, sender); 
               totalSwapped = totalSwapped + orders[i].amountOutputToken;
               uint256 id = orders[i].uniqueId;
                idToOrder[id].isActive = false;
            emit OrderCompleted(id);
            
           }
           else {
                uint256 id = orders[i].uniqueId;
               uint256 amountLeftInput = amountInputToken.sub(totalSwapped);
               uint256 amountLeftOutput = (orders[i].outputToInputPrice.mul(amountLeftInput)).div(10**18);
               transferFunds(outputToken, inputToken, amountLeftInput, amountLeftOutput, orders[i].user, sender);
               idToOrder[id].amountInputToken = idToOrder[id].amountInputToken.sub(amountLeftOutput);
               idToOrder[id].amountOutputToken = idToOrder[id].amountOutputToken.sub(amountLeftInput);
               emit TransferLargeLeft(id);
           }

           emit TransferLarge(1);
    }
    
    function transferSmall(orderBook[] memory orders, address outputToken, address inputToken, address sender) internal returns(uint256 left) {
         uint256 length = orders.length; 
          uint256 totalSwapped =0;
           for(uint256 i = 0; i< length; i++)
          {
               transferFunds(outputToken, inputToken, orders[i].amountInputToken, orders[i].amountOutputToken, orders[i].user, sender); 
               totalSwapped = totalSwapped + orders[i].amountOutputToken;
               uint256 id = orders[i].uniqueId;
                idToOrder[id].isActive = false;
               emit OrderCompleted(id);

           }
      emit TransferSmall(1);  
       return(totalSwapped);   
       
    }
    
    
    function activeOrdersUser(address user) external view returns(orderBook[] memory orders){
        uint256 totalOrders = orderId.current();
        uint256 totalCount =0;
        for(uint256 i=0; i<totalOrders;i++){
            if(idToOrder[i+1].isActive == true && idToOrder[i+1].user == user && idToOrder[i+1].expiry > block.timestamp){
               totalCount++;
                
            }
        }

         orderBook[] memory userOrder = new orderBook[](totalCount);
         for(uint256 i=0; i<totalOrders;i++){
            if(idToOrder[i+1].isActive == true && idToOrder[i+1].user == user && idToOrder[i+1].expiry > block.timestamp){
               userOrder[i] = idToOrder[i+1];
                
            }
        }
      return(userOrder);  
    }

    function cancelOrder(uint256 _orderId) external{
        require(msg.sender == idToOrder[_orderId].user,"Caller Error");
        idToOrder[_orderId].isActive = false;
    }


    
    
    
    function transferFunds(address input, address output, uint256 amountIn, uint256 amountOut ,address maker, address taker) private{
        ITRC20(input).transferFrom(maker, taker, amountIn);
        ITRC20(output).transferFrom(taker, maker, amountOut);
    }
    
     function inCaseTokensGetStuck(
        address _token,
        uint256 _amount,
        address _to
    ) public onlyOwner{
       ITRC20(_token).transfer( _to, _amount) ; 
    }
    
      
 
}
